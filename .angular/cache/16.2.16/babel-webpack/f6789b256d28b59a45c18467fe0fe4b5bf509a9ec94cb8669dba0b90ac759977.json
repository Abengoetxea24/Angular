{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServicesService {\n  constructor(http) {\n    this.http = http;\n    this.rescatadosSource = new BehaviorSubject([]);\n    this.rescatados$ = this.rescatadosSource.asObservable();\n    this.apiUrl = 'http://localhost/rescatadosApi';\n  }\n  // Método para cargar rescatados desde la API y emitirlos al BehaviorSubject\n  cargarRescatados() {\n    this.http.get(this.apiUrl).subscribe(rescatados => {\n      this.rescatadosSource.next(rescatados);\n      console.log();\n    });\n  }\n  // Obtener el valor actual de la lista de rescatados\n  obtenerRescatados() {\n    return this.rescatadosSource.getValue();\n  }\n  // Agregar un nuevo rescatado\n  agregarRescatado(rescatado) {\n    const rescatados = this.obtenerRescatados();\n    this.rescatadosSource.next([...rescatados, rescatado]);\n  }\n  // Actualizar un rescatado existente\n  actualizarRescatado(index, rescatado) {\n    const rescatados = this.obtenerRescatados();\n    rescatados[index] = rescatado;\n    this.rescatadosSource.next([...rescatados]);\n  }\n  // Eliminar un rescatado por índice\n  eliminarRescatado(index) {\n    const rescatados = this.obtenerRescatados();\n    rescatados.splice(index, 1);\n    this.rescatadosSource.next([...rescatados]);\n  }\n  static {\n    this.ɵfac = function ServicesService_Factory(t) {\n      return new (t || ServicesService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ServicesService,\n      factory: ServicesService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","ServicesService","constructor","http","rescatadosSource","rescatados$","asObservable","apiUrl","cargarRescatados","get","subscribe","rescatados","next","console","log","obtenerRescatados","getValue","agregarRescatado","rescatado","actualizarRescatado","index","eliminarRescatado","splice","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/zornotza/Documents/laravel-proiektuak/Angular/src/app/Services/services.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n// Interfaz para estructurar los datos de los rescatados\nexport interface Rescatado {\n  nombre: string;\n  apellido: string;\n  edad: string;\n  sexo: string;\n  procedencia: string;\n  valoracion_medica: string;\n  medico_id: string;\n  rescate_id: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServicesService {\n  private rescatadosSource = new BehaviorSubject<Rescatado[]>([]);\n  rescatados$ = this.rescatadosSource.asObservable();\n  private apiUrl = 'http://localhost/rescatadosApi';\n\n  constructor(private http: HttpClient) {}\n\n  // Método para cargar rescatados desde la API y emitirlos al BehaviorSubject\n  cargarRescatados() {\n    this.http.get<Rescatado[]>(this.apiUrl).subscribe((rescatados) => {\n      this.rescatadosSource.next(rescatados);\n      console.log()\n    });\n  }\n\n  // Obtener el valor actual de la lista de rescatados\n  obtenerRescatados(): Rescatado[] {\n    return this.rescatadosSource.getValue();\n  }\n\n  // Agregar un nuevo rescatado\n  agregarRescatado(rescatado: Rescatado) {\n    const rescatados = this.obtenerRescatados();\n    this.rescatadosSource.next([...rescatados, rescatado]);\n  }\n\n  // Actualizar un rescatado existente\n  actualizarRescatado(index: number, rescatado: Rescatado) {\n    const rescatados = this.obtenerRescatados();\n    rescatados[index] = rescatado;\n    this.rescatadosSource.next([...rescatados]);\n  }\n\n  // Eliminar un rescatado por índice\n  eliminarRescatado(index: number) {\n    const rescatados = this.obtenerRescatados();\n    rescatados.splice(index, 1);\n    this.rescatadosSource.next([...rescatados]);\n  }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;;AAkBlD,OAAM,MAAOC,eAAe;EAK1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,gBAAgB,GAAG,IAAIJ,eAAe,CAAc,EAAE,CAAC;IAC/D,KAAAK,WAAW,GAAG,IAAI,CAACD,gBAAgB,CAACE,YAAY,EAAE;IAC1C,KAAAC,MAAM,GAAG,gCAAgC;EAEV;EAEvC;EACAC,gBAAgBA,CAAA;IACd,IAAI,CAACL,IAAI,CAACM,GAAG,CAAc,IAAI,CAACF,MAAM,CAAC,CAACG,SAAS,CAAEC,UAAU,IAAI;MAC/D,IAAI,CAACP,gBAAgB,CAACQ,IAAI,CAACD,UAAU,CAAC;MACtCE,OAAO,CAACC,GAAG,EAAE;IACf,CAAC,CAAC;EACJ;EAEA;EACAC,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACX,gBAAgB,CAACY,QAAQ,EAAE;EACzC;EAEA;EACAC,gBAAgBA,CAACC,SAAoB;IACnC,MAAMP,UAAU,GAAG,IAAI,CAACI,iBAAiB,EAAE;IAC3C,IAAI,CAACX,gBAAgB,CAACQ,IAAI,CAAC,CAAC,GAAGD,UAAU,EAAEO,SAAS,CAAC,CAAC;EACxD;EAEA;EACAC,mBAAmBA,CAACC,KAAa,EAAEF,SAAoB;IACrD,MAAMP,UAAU,GAAG,IAAI,CAACI,iBAAiB,EAAE;IAC3CJ,UAAU,CAACS,KAAK,CAAC,GAAGF,SAAS;IAC7B,IAAI,CAACd,gBAAgB,CAACQ,IAAI,CAAC,CAAC,GAAGD,UAAU,CAAC,CAAC;EAC7C;EAEA;EACAU,iBAAiBA,CAACD,KAAa;IAC7B,MAAMT,UAAU,GAAG,IAAI,CAACI,iBAAiB,EAAE;IAC3CJ,UAAU,CAACW,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAC3B,IAAI,CAAChB,gBAAgB,CAACQ,IAAI,CAAC,CAAC,GAAGD,UAAU,CAAC,CAAC;EAC7C;;;uBAtCWV,eAAe,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAfzB,eAAe;MAAA0B,OAAA,EAAf1B,eAAe,CAAA2B,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}