{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AdminComponent = class AdminComponent {\n  constructor(servicesService) {\n    this.servicesService = servicesService;\n    this.rescatados = []; // Lista de rescatados que se mostrará en la tabla\n  }\n  // Inyectamos el servicio en el constructor para acceder a los métodos y observables\n  ngOnInit() {\n    // Nos suscribimos al observable `rescatados$` para obtener los datos en tiempo real\n    this.servicesService.rescatados$.subscribe(data => {\n      this.rescatados = data; // Actualizamos la lista local cada vez que cambien los datos en el servicio\n    });\n  }\n  // Método para eliminar un rescatado según su índice\n  eliminarRescatado(index) {\n    this.servicesService.eliminarRescatado(index); // Llamamos al método del servicio para eliminarlo\n  }\n};\n\nAdminComponent = __decorate([Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.scss'] // Archivo SCSS asociado\n})], AdminComponent);","map":{"version":3,"names":["Component","AdminComponent","constructor","servicesService","rescatados","ngOnInit","rescatados$","subscribe","data","eliminarRescatado","index","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/aimarbengoetxeaolano/Documents/GS2-/Reto/Angular/src/app/Components/admin/admin.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ServicesService } from '../services.service'; // Importamos el servicio para acceder a los datos\n\n@Component({\n  selector: 'app-admin', // Selector para utilizar este componente en el HTML\n  templateUrl: './admin.component.html', // Archivo HTML asociado\n  styleUrls: ['./admin.component.scss'], // Archivo SCSS asociado\n})\nexport class AdminComponent implements OnInit {\n  rescatados: any[] = []; // Lista de rescatados que se mostrará en la tabla\n\n  constructor(private servicesService: ServicesService) {} \n  // Inyectamos el servicio en el constructor para acceder a los métodos y observables\n\n  ngOnInit() {\n    // Nos suscribimos al observable `rescatados$` para obtener los datos en tiempo real\n    this.servicesService.rescatados$.subscribe((data) => {\n      this.rescatados = data; // Actualizamos la lista local cada vez que cambien los datos en el servicio\n    });\n  }\n\n  // Método para eliminar un rescatado según su índice\n  eliminarRescatado(index: number) {\n    this.servicesService.eliminarRescatado(index); // Llamamos al método del servicio para eliminarlo\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAGzBC,YAAoBC,eAAgC;IAAhC,KAAAA,eAAe,GAAfA,eAAe;IAFnC,KAAAC,UAAU,GAAU,EAAE,CAAC,CAAC;EAE+B;EACvD;EAEAC,QAAQA,CAAA;IACN;IACA,IAAI,CAACF,eAAe,CAACG,WAAW,CAACC,SAAS,CAAEC,IAAI,IAAI;MAClD,IAAI,CAACJ,UAAU,GAAGI,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC;EACJ;EAEA;EACAC,iBAAiBA,CAACC,KAAa;IAC7B,IAAI,CAACP,eAAe,CAACM,iBAAiB,CAACC,KAAK,CAAC,CAAC,CAAC;EACjD;CACD;;AAjBYT,cAAc,GAAAU,UAAA,EAL1BX,SAAS,CAAC;EACTY,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB,CAAC,CAAE;CACxC,CAAC,C,EACWb,cAAc,CAiB1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}