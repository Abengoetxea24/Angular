{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst HttpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class ServicesService {\n  constructor(http) {\n    this.http = http;\n    this.rescatadosSource = new BehaviorSubject([]);\n    this.rescatados$ = this.rescatadosSource.asObservable();\n    this.apiUrl = 'http://localhost/rescatadosApi'; // API URL\n  }\n  // Método para cargar rescatados desde la API o desde localStorage\n  cargarRescatados() {\n    // Verificar si los datos ya están en localStorage\n    const rescatadosLocal = localStorage.getItem('rescatados');\n    if (rescatadosLocal) {\n      // Si existen en localStorage, cargarlos\n      this.rescatadosSource.next(JSON.parse(rescatadosLocal));\n    } else {\n      // Si no existen, realizar la solicitud HTTP\n      this.http.get(this.apiUrl).subscribe(rescatados => {\n        this.rescatadosSource.next(rescatados);\n        localStorage.setItem('rescatados', JSON.stringify(rescatados)); // Guardar en localStorage\n      });\n    }\n  }\n  // Obtener el valor actual de la lista de rescatados\n  obtenerRescatados() {\n    return this.rescatadosSource.getValue();\n  }\n  // Agregar un nuevo rescatado y guardar en localStorage\n  agregarRescatado(rescatado) {\n    const rescatados = this.obtenerRescatados();\n    rescatados.push(rescatado);\n    this.rescatadosSource.next(rescatados);\n    localStorage.setItem('rescatados', JSON.stringify(rescatados)); // Guardar en localStorage\n  }\n  // Actualizar un rescatado existente y guardar en localStorage\n  actualizarRescatado(index, rescatado) {\n    const rescatados = this.obtenerRescatados();\n    rescatados[index] = rescatado;\n    this.rescatadosSource.next([...rescatados]);\n    localStorage.setItem('rescatados', JSON.stringify(rescatados)); // Guardar en localStorage\n  }\n  // Eliminar un rescatado por índice y guardar en localStorage\n  eliminarRescatado(index) {\n    const rescatados = this.obtenerRescatados();\n    rescatados.splice(index, 1);\n    this.rescatadosSource.next([...rescatados]);\n    localStorage.setItem('rescatados', JSON.stringify(rescatados)); // Guardar en localStorage\n  }\n\n  static {\n    this.ɵfac = function ServicesService_Factory(t) {\n      return new (t || ServicesService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ServicesService,\n      factory: ServicesService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","HttpHeaders","HttpOptions","headers","ServicesService","constructor","http","rescatadosSource","rescatados$","asObservable","apiUrl","cargarRescatados","rescatadosLocal","localStorage","getItem","next","JSON","parse","get","subscribe","rescatados","setItem","stringify","obtenerRescatados","getValue","agregarRescatado","rescatado","push","actualizarRescatado","index","eliminarRescatado","splice","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/zornotza/Documents/laravel-proiektuak/Angular/src/app/Services/services.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nconst HttpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n  }),\n};\n\n// Interfaz para estructurar los datos de los rescatados\nexport interface Rescatado {\n  nombre: string;\n  apellido: string;\n  edad: string;\n  sexo: string;\n  procedencia: string;\n  valoracion_medica: string;\n  medico_id: string;\n  rescate_id: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServicesService {\n  private rescatadosSource = new BehaviorSubject<Rescatado[]>([]);\n  rescatados$ = this.rescatadosSource.asObservable();\n  private apiUrl = 'http://localhost/rescatadosApi'; // API URL\n\n  constructor(private http: HttpClient) {}\n\n  // Método para cargar rescatados desde la API o desde localStorage\n  cargarRescatados() {\n    // Verificar si los datos ya están en localStorage\n    const rescatadosLocal = localStorage.getItem('rescatados');\n    if (rescatadosLocal) {\n      // Si existen en localStorage, cargarlos\n      this.rescatadosSource.next(JSON.parse(rescatadosLocal));\n    } else {\n      // Si no existen, realizar la solicitud HTTP\n      this.http.get<Rescatado[]>(this.apiUrl).subscribe((rescatados) => {\n        this.rescatadosSource.next(rescatados);\n        localStorage.setItem('rescatados', JSON.stringify(rescatados)); // Guardar en localStorage\n      });\n    }\n  }\n\n  // Obtener el valor actual de la lista de rescatados\n  obtenerRescatados(): Rescatado[] {\n    return this.rescatadosSource.getValue();\n  }\n\n  // Agregar un nuevo rescatado y guardar en localStorage\n  agregarRescatado(rescatado: Rescatado) {\n    const rescatados = this.obtenerRescatados();\n    rescatados.push(rescatado);\n    this.rescatadosSource.next(rescatados);\n    localStorage.setItem('rescatados', JSON.stringify(rescatados)); // Guardar en localStorage\n  }\n\n  // Actualizar un rescatado existente y guardar en localStorage\n  actualizarRescatado(index: number, rescatado: Rescatado) {\n    const rescatados = this.obtenerRescatados();\n    rescatados[index] = rescatado;\n    this.rescatadosSource.next([...rescatados]);\n    localStorage.setItem('rescatados', JSON.stringify(rescatados)); // Guardar en localStorage\n  }\n\n  // Eliminar un rescatado por índice y guardar en localStorage\n  eliminarRescatado(index: number) {\n    const rescatados = this.obtenerRescatados();\n    rescatados.splice(index, 1);\n    this.rescatadosSource.next([...rescatados]);\n    localStorage.setItem('rescatados', JSON.stringify(rescatados)); // Guardar en localStorage\n  }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAAqBC,WAAW,QAAQ,sBAAsB;;;AAE9D,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIF,WAAW,CAAC;IACvB,cAAc,EAAE;GACjB;CACF;AAiBD,OAAM,MAAOG,eAAe;EAK1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,gBAAgB,GAAG,IAAIP,eAAe,CAAc,EAAE,CAAC;IAC/D,KAAAQ,WAAW,GAAG,IAAI,CAACD,gBAAgB,CAACE,YAAY,EAAE;IAC1C,KAAAC,MAAM,GAAG,gCAAgC,CAAC,CAAC;EAEZ;EAEvC;EACAC,gBAAgBA,CAAA;IACd;IACA,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAC1D,IAAIF,eAAe,EAAE;MACnB;MACA,IAAI,CAACL,gBAAgB,CAACQ,IAAI,CAACC,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC,CAAC;KACxD,MAAM;MACL;MACA,IAAI,CAACN,IAAI,CAACY,GAAG,CAAc,IAAI,CAACR,MAAM,CAAC,CAACS,SAAS,CAAEC,UAAU,IAAI;QAC/D,IAAI,CAACb,gBAAgB,CAACQ,IAAI,CAACK,UAAU,CAAC;QACtCP,YAAY,CAACQ,OAAO,CAAC,YAAY,EAAEL,IAAI,CAACM,SAAS,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC;MAClE,CAAC,CAAC;;EAEN;EAEA;EACAG,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAAChB,gBAAgB,CAACiB,QAAQ,EAAE;EACzC;EAEA;EACAC,gBAAgBA,CAACC,SAAoB;IACnC,MAAMN,UAAU,GAAG,IAAI,CAACG,iBAAiB,EAAE;IAC3CH,UAAU,CAACO,IAAI,CAACD,SAAS,CAAC;IAC1B,IAAI,CAACnB,gBAAgB,CAACQ,IAAI,CAACK,UAAU,CAAC;IACtCP,YAAY,CAACQ,OAAO,CAAC,YAAY,EAAEL,IAAI,CAACM,SAAS,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC;EAClE;EAEA;EACAQ,mBAAmBA,CAACC,KAAa,EAAEH,SAAoB;IACrD,MAAMN,UAAU,GAAG,IAAI,CAACG,iBAAiB,EAAE;IAC3CH,UAAU,CAACS,KAAK,CAAC,GAAGH,SAAS;IAC7B,IAAI,CAACnB,gBAAgB,CAACQ,IAAI,CAAC,CAAC,GAAGK,UAAU,CAAC,CAAC;IAC3CP,YAAY,CAACQ,OAAO,CAAC,YAAY,EAAEL,IAAI,CAACM,SAAS,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC;EAClE;EAEA;EACAU,iBAAiBA,CAACD,KAAa;IAC7B,MAAMT,UAAU,GAAG,IAAI,CAACG,iBAAiB,EAAE;IAC3CH,UAAU,CAACW,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAC3B,IAAI,CAACtB,gBAAgB,CAACQ,IAAI,CAAC,CAAC,GAAGK,UAAU,CAAC,CAAC;IAC3CP,YAAY,CAACQ,OAAO,CAAC,YAAY,EAAEL,IAAI,CAACM,SAAS,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC;EAClE;;;;uBAlDWhB,eAAe,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAf/B,eAAe;MAAAgC,OAAA,EAAfhC,eAAe,CAAAiC,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}