{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class thServicesService {\n  constructor() {\n    this.rescatadosSubject = new BehaviorSubject([]);\n    this.rescatados$ = this.rescatadosSubject.asObservable();\n  }\n  eliminarRescatado(index) {\n    const currentRescatados = this.rescatadosSubject.getValue();\n    currentRescatados.splice(index, 1);\n    this.rescatadosSubject.next(currentRescatados);\n  }\n  static {\n    this.ɵfac = function thServicesService_Factory(t) {\n      return new (t || thServicesService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: thServicesService,\n      factory: thServicesService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport let AdminComponent = class AdminComponent {\n  constructor(servicesService) {\n    this.servicesService = servicesService;\n    this.rescatados = []; // Lista de rescatados que se mostrará en la tabla\n    this.displayedColumns = ['nombre', 'edad', 'acciones']; // Columnas que se mostrarán en la tabla\n  }\n  // Inyectamos el servicio en el constructor para acceder a los métodos y observables\n  ngOnInit() {\n    // Nos suscribimos al observable `rescatados$` para obtener los datos en tiempo real\n    this.servicesService.rescatados$.subscribe(data => {\n      this.rescatados = data; // Actualizamos la lista local cada vez que cambien los datos en el servicio\n    });\n  }\n  // Método para eliminar un rescatado según su índice\n  eliminarRescatado(index) {\n    this.servicesService.eliminarRescatado(index); // Llamamos al método del servicio para eliminarlo\n  }\n};\n\nAdminComponent = __decorate([Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.scss'] // Archivo SCSS asociado\n})], AdminComponent);","map":{"version":3,"names":["Component","BehaviorSubject","thServicesService","constructor","rescatadosSubject","rescatados$","asObservable","eliminarRescatado","index","currentRescatados","getValue","splice","next","factory","ɵfac","providedIn","AdminComponent","servicesService","rescatados","displayedColumns","ngOnInit","subscribe","data","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/aimarbengoetxeaolano/Documents/GS2-/Reto/Angular/src/app/Components/admin/admin.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ServicesService } from '../services.service'; // Importamos el servicio para acceder a los datos\nimport { Injectable } from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs';\n\n\n@Injectable({\n\n  providedIn: 'root',\n\n})\n\nexport class thServicesService {\n\n  private rescatadosSubject = new BehaviorSubject<any[]>([]);\n\n  rescatados$ = this.rescatadosSubject.asObservable();\n\n\n\n  constructor() {}\n\n\n\n  eliminarRescatado(index: number) {\n\n    const currentRescatados = this.rescatadosSubject.getValue();\n\n    currentRescatados.splice(index, 1);\n\n    this.rescatadosSubject.next(currentRescatados);\n\n  }\n\n}\n\n@Component({\n  selector: 'app-admin', // Selector para utilizar este componente en el HTML\n  templateUrl: './admin.component.html', // Archivo HTML asociado\n  styleUrls: ['./admin.component.scss'], // Archivo SCSS asociado\n})\nexport class AdminComponent implements OnInit {\n  rescatados: any[] = []; // Lista de rescatados que se mostrará en la tabla\n  displayedColumns: string[] = ['nombre', 'edad', 'acciones']; // Columnas que se mostrarán en la tabla\n  constructor(private servicesService: ServicesService) {} \n  // Inyectamos el servicio en el constructor para acceder a los métodos y observables\n\n  ngOnInit() {\n    // Nos suscribimos al observable `rescatados$` para obtener los datos en tiempo real\n    this.servicesService.rescatados$.subscribe((data) => {\n      this.rescatados = data; // Actualizamos la lista local cada vez que cambien los datos en el servicio\n    });\n  }\n\n  // Método para eliminar un rescatado según su índice\n  eliminarRescatado(index: number) {\n    this.servicesService.eliminarRescatado(index); // Llamamos al método del servicio para eliminarlo\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAIjD,SAASC,eAAe,QAAQ,MAAM;;AAStC,OAAM,MAAOC,iBAAiB;EAQ5BC,YAAA;IANQ,KAAAC,iBAAiB,GAAG,IAAIH,eAAe,CAAQ,EAAE,CAAC;IAE1D,KAAAI,WAAW,GAAG,IAAI,CAACD,iBAAiB,CAACE,YAAY,EAAE;EAIpC;EAIfC,iBAAiBA,CAACC,KAAa;IAE7B,MAAMC,iBAAiB,GAAG,IAAI,CAACL,iBAAiB,CAACM,QAAQ,EAAE;IAE3DD,iBAAiB,CAACE,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;IAElC,IAAI,CAACJ,iBAAiB,CAACQ,IAAI,CAACH,iBAAiB,CAAC;EAEhD;;;uBApBWP,iBAAiB;IAAA;EAAA;;;aAAjBA,iBAAiB;MAAAW,OAAA,EAAjBX,iBAAiB,CAAAY,IAAA;MAAAC,UAAA,EAJhB;IAAM;EAAA;;AAiCb,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAGzBb,YAAoBc,eAAgC;IAAhC,KAAAA,eAAe,GAAfA,eAAe;IAFnC,KAAAC,UAAU,GAAU,EAAE,CAAC,CAAC;IACxB,KAAAC,gBAAgB,GAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;EACN;EACvD;EAEAC,QAAQA,CAAA;IACN;IACA,IAAI,CAACH,eAAe,CAACZ,WAAW,CAACgB,SAAS,CAAEC,IAAI,IAAI;MAClD,IAAI,CAACJ,UAAU,GAAGI,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC;EACJ;EAEA;EACAf,iBAAiBA,CAACC,KAAa;IAC7B,IAAI,CAACS,eAAe,CAACV,iBAAiB,CAACC,KAAK,CAAC,CAAC,CAAC;EACjD;CACD;;AAjBYQ,cAAc,GAAAO,UAAA,EAL1BvB,SAAS,CAAC;EACTwB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB,CAAC,CAAE;CACxC,CAAC,C,EACWV,cAAc,CAiB1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}